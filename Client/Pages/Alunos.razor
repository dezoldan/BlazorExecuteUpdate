@page "/alunos"
@using BlazorApp1.Client.ServicesClient;
@using BlazorApp1.Shared;
@inject HttpClient Http
@inject IServiceClientAluno _serviceAluno

<h1 class="mb-3">
    Alunos <button type="button" class="btn btn-link"
                   @onclick="() => GetAlunos()">
        <i style="font-size:2.5em;"
           class="bi bi-arrow-clockwise"></i>
    </button>
</h1>
<h4 class="mb-3">
    <button @onclick="AddAluno" type="button" style="border-radius:20%;" class="btn btn-warning">
        <b>
            <i class="bi bi-person-plus-fill"></i> Incluir
        </b>
    </button>
</h4>

@if (alunosTestes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <table class="table table-hover">
            <thead style="font-weight:bold; font-size:1.2em;">
                <tr>

                    <td style="width: 10%">Id</td>
                    <td style="width: 10%">Nome</td>
                    <td style="width: 20%">Sobrenome</td>
                    <td style="width: 10%">Idade</td>
                    <td style="width: 10%">Excluir</td>
                    <td style="width: 15%">Editar</td>
                    <td style="width: 25%">+Infos</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var aluno in alunosTestes)
                {
                    <tr @onclick="() => aluno.IsRowExpanded =! aluno.IsRowExpanded">
                        @if (!aluno.IsRowExpanded)
                        {
                            icon1 = "bi bi-plus-circle-fill";
                        }
                        else
                        {
                            icon1 = "bi bi-x-circle";
                        }
                        <td>@aluno.Id</td>
                        <td>@aluno.Nome</td>
                        <td>@aluno.Sobrenome</td>
                        <td><input type="number" @bind-value="@aluno.Idade" class="input-group"></td>
                        <td>
                            <button class="btn btn-danger" type="button" @onclick="(() => DeleteClick(aluno.Id))">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                        <td>
                            <button class="btn btn-danger" type="button" @onclick="(() =>
                                PutAluno(aluno))">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                        </td>
                        <td><i style="font-size:2em;" class="@icon1"></i></td>
                    </tr>
                    @if (aluno.IsRowExpanded)
                    {
                        <tr>
                            <td colspan="7">
                                <div class="container bg-danger">
                                    <div style="background-color:#fffafa" class="card card-body">
                                        <h5 style="text-align:left;">A idade do aluno é: @aluno.Idade</h5>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
<SpinLoader IsLoading="isLoading1" Color="Green" Size="40px" Spinner="SpinnerType.Circle">
</SpinLoader>
<EditForm Model="@alunosTeste1" OnValidSubmit="@AdicionaAluno">
    <DataAnnotationsValidator/>
    <div style="display:@visivel" class="container">
        <div class="row">
            <div class="col-3">
                <label class="form-label">
                    <b>Nome: (*)</b>
                </label>
                <CustomInputText @bind-Value="alunosTeste1!.Nome" class="form-control" />
                    <ValidationMessage For="() => alunosTeste1.Nome"/>
                        <label style="color:blue; font-size:11px;">Count: @alunosTeste1.Nome.Length Máx: 15</label>
            </div>
            <div class="col-3">
                <label class="form-label">
                    <b>Sobrenome: (*)</b>
                </label>
                <CustomInputText @bind-Value="alunosTeste1!.Sobrenome" class="form-control"></CustomInputText>
                <ValidationMessage For="() => alunosTeste1.Sobrenome" />
                <label style="color:blue; font-size:11px;">Count: @alunosTeste1.Sobrenome.Length Máx: 15</label>
            </div>
            <div class="col-3">
                <label class="form-label">
                    <b>Idade: (*)</b>
                </label>
                <InputNumber @bind-Value="alunosTeste1!.Idade" class="form-control"></InputNumber>
                <ValidationMessage For="() => alunosTeste1.Idade" />
            </div>
            <div class="row mt-3">
                <div class="col">
                    <button class="btn btn-secondary col-3" type="submit">
                        <i class="bi bi-door-open"></i> Adicionar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private IEnumerable<AlunosTeste>? alunosTestes;
    private bool isLoading1;
    private string icon1 = "bi bi-plus-circle-fill";
    private AlunosTeste? alunosTeste1 { get; set; } = new AlunosTeste();
    private string visivel = "none";

    protected override async Task OnInitializedAsync()
    {
        // Vídeo #19, e se refere a implementação no projeto Blazor Server do vídeo #01.
        alunosTestes = await Http.GetFromJsonAsync<IEnumerable<AlunosTeste>>("v0/Aluno/metodo1");

        // Vídeo #20...
        //alunosTestes = await _serviceAluno.GetAlunos1();
    }

    // Vídeo #21, implementa o método delete no client, e se refere ao vídeo #10.
    async Task DeleteClick(int id)
    {
        // Vídeo #22.
        isLoading1 = true;
        await Task.Delay(1500);
        await Http.DeleteAsync($"v0/Aluno/delete1/{id}");
        alunosTestes = await _serviceAluno.GetAlunos1();
        isLoading1 = false;
    }

    async Task GetAlunos()
    {
        isLoading1 = true;
        await Task.Delay(1500);
        alunosTestes = await _serviceAluno.GetAlunos1();
        visivel = "none";
        isLoading1 = false;
    }

    // Vídeo #30 e refere-se ao vídeo #15.
    async Task PutAluno(AlunosTeste aluno)
    {
        isLoading1 = true;
        await Task.Delay(1500);
        await _serviceAluno.PutAlunos1(aluno);
        isLoading1 = false;
    }

    // Vídeo #31.
    void AddAluno()
    {
        visivel = "block";
    }

    async Task AdicionaAluno()
    {
        isLoading1 = true;
        await Task.Delay(1500);
        AlunosTeste alunosTeste2 = new()
            {
                Nome = alunosTeste1!.Nome,
                Sobrenome = alunosTeste1.Sobrenome,
                Idade = alunosTeste1.Idade
            };

            await _serviceAluno.PostAluno1(alunosTeste2);
            alunosTestes = await _serviceAluno.GetAlunos1();
            visivel = "none";
            isLoading1 = false;
    }
}
